{"version":3,"sources":["ColorModeSwitcher.tsx","components/Header.tsx","ui/TaskStar.tsx","ui/TaskItem.tsx","ui/YearItem.tsx","components/Drawer.tsx","components/Home.tsx","utils/index.ts","components/Task.tsx","solutions/2020/1_report_repair/index.ts","solutions/2020/2_password_philosophy/index.ts","solutions/2020/3_toboggan_trajectory/index.ts","solutions/2020/4_passport_processing/index.ts","solutions/2020/5_binary_boarding/index.ts","solutions/2020/6_custom_customs/index.ts","App.tsx","reportWebVitals.ts","serviceWorker.ts","index.tsx"],"names":["ColorModeSwitcher","props","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","size","fontSize","variant","color","marginLeft","onClick","icon","aria-label","Header","openDrawer","closeDrawer","isDrawerOpen","goHome","as","alignItems","justifyContent","Hamburger","boxSize","position","top","left","margin","right","TaskStar","done","first","MdStar","marginRight","marginBottom","TaskItem","changeTask","id","title","second","YearItem","tasks","flex","textAlign","pb","map","task","idx","Drawer","isOpen","onClose","years","placement","allowToggle","year","Home","centerContent","padding","href","isExternal","marginTop","getInput","file","a","separator","fetch","response","split","getFileAsText","uri","Task","descriptionUri","solutionUri","inputUri","solutionFn","useState","code","setCode","input","setInput","isLoading","setIsLoading","solution1","setSolution1","solution2","setSolution2","useEffect","loadData","codeAsText","inputAsText","calculateSolution","sol1","sol2","direction","ExternalLink","spacing","paddingLeft","colorScheme","loadingText","rightIcon","ArrowForward","language","wrapLongLines","showLineNumbers","style","allyDark","reportRepair","part1","string_list","list","line","i","length","element1","j","element2","z","element3","passwordPhilosophy","filter","elem","isPwdValid","row","range","rowValue","password","min","max","value","replace","low","high","extractInfosFromRow","occurence","str","chr","_","lowMatched","charAt","startsWith","highMatched","tobogganTrajectory","countInputs","down","countTree","countInput","count","max_x","treeCount","y","passportProcessing","cleanList","passport","isValidPassport","lines","passports","currentPassport","trim","Object","keys","push","keyValue","t","field","fields","Map","set","regex","RegExp","fieldValidator","parseInt","indexOf","entries","test","TRANSALTION","binaryBoarding","seatIds","convertToSeatId","allSeatsIds","mySeatId","boardingPass","seatId","get","substr","CustomCustoms","Set","replaceAll","toString","everyoneAnsweredYes","answers","allAnswers","answersProPerson","answ","yesForEveryone","answPerson","App","useDisclosure","onOpen","selectedTask","setSelectedTask","changeSelectedTask","customCustoms","customTheme","extendTheme","config","useSystemColorMode","initialColorMode","theme","minH","p","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d198d0b7.chunk.js","sourcesContent":["import * as React from \"react\"\nimport {\n  useColorMode,\n  useColorModeValue,\n  IconButton,\n  IconButtonProps,\n} from \"@chakra-ui/react\"\nimport { FaMoon, FaSun } from \"react-icons/fa\"\n\ntype ColorModeSwitcherProps = Omit<IconButtonProps, \"aria-label\">\n\nexport const ColorModeSwitcher: React.FC<ColorModeSwitcherProps> = (props) => {\n  const { toggleColorMode } = useColorMode()\n  const text = useColorModeValue(\"dark\", \"light\")\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun)\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      variant=\"ghost\"\n      color=\"current\"\n      marginLeft=\"2\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      aria-label={`Switch to ${text} mode`}\n      {...props}\n    />\n  )\n}\n","import { Flex, Heading, IconButton, Link } from \"@chakra-ui/react\";\nimport { HamburgerIcon } from \"@chakra-ui/icons\";\nimport React, {  } from \"react\";\nimport { ColorModeSwitcher } from \"../ColorModeSwitcher\";\n\ntype HeaderProps = {\n    openDrawer: () => void;\n    closeDrawer: () => void\n    isDrawerOpen: boolean;\n    goHome: () => void\n}\n\nexport const Header = ({openDrawer, closeDrawer, isDrawerOpen, goHome}: HeaderProps) => {\n  return (\n    <Flex as=\"nav\" alignItems=\"center\" justifyContent=\"center\">\n      <IconButton\n        size=\"lg\"\n        aria-label=\"menu\"\n        icon={<HamburgerIcon boxSize={8}/>}\n        variant=\"ghost\"\n        color=\"current\"\n        marginLeft=\"2\"\n        position=\"absolute\"\n        top=\"0\"\n        left=\"0\"\n        onClick={isDrawerOpen ? () => closeDrawer() : () => openDrawer()}\n      />\n      <Heading margin=\"2\"><Link onClick={() => goHome()}>Advent of code</Link></Heading>\n      <ColorModeSwitcher position=\"absolute\" top=\"0\" right=\"0\" />\n    </Flex>\n  );\n};\n","import { ListIcon } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport { MdStar } from \"react-icons/md\";\n\ntype TaskStarProps = {\n  done?: boolean;\n  first?: boolean;\n};\nconst TaskStar = ({ done, first }: TaskStarProps) => (\n  <ListIcon\n    as={MdStar}\n    marginLeft={first ? 1 : 0}\n    marginRight={0}\n    marginBottom=\"0.15rem\"\n    color={done ? \"yellow.500\" : \"inhirit\"}\n  />\n);\n\nexport default TaskStar;\n","import { Box, Flex, Link, ListItem } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport TaskStar from \"./TaskStar\";\n\nexport type TaskItemProps = {\n  changeTask: (id: string) => void;\n  id: string;\n  title: String;\n  first?: boolean;\n  second?: boolean;\n};\nconst TaskItem = ({ changeTask, id,  title, first, second }: TaskItemProps) => {\n  return (\n    <ListItem marginBottom={1}>\n      <Flex justifyContent=\"flex-start\">\n        <Box><Link onClick={() => changeTask(id)}>{title}</Link></Box>\n        <Box marginLeft=\"auto\">\n          <TaskStar first done={first} />\n          <TaskStar done={second} />\n        </Box>\n      </Flex>\n    </ListItem>\n  );\n};\n\nexport default TaskItem;\n","import { AccordionItem, AccordionButton, Box, AccordionIcon, AccordionPanel, List } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport { TaskProps } from \"../components/Task\";\nimport TaskItem from \"./TaskItem\";\n\nexport type YearItemProps = {\n    title: string;\n    tasks: Array<TaskProps>\n}\nconst YearItem = ({title, tasks}: YearItemProps) => {\n  return (\n    <AccordionItem>\n      <AccordionButton>\n        <Box flex=\"1\" textAlign=\"left\">\n          {title}\n        </Box>\n        <AccordionIcon />\n      </AccordionButton>\n      <AccordionPanel pb={2}>\n        <List>\n            {\n                tasks.map((task, idx) => <TaskItem key={idx} {...task}/>)\n            }\n        </List>\n      </AccordionPanel>\n    </AccordionItem>\n  );\n};\n\nexport default YearItem;\n","import {\n  DrawerOverlay,\n  DrawerContent,\n  DrawerHeader,\n  DrawerBody,\n  Accordion,\n  Drawer as ChakraDrawer,\n} from \"@chakra-ui/react\";\nimport React from \"react\";\nimport YearItem, { YearItemProps } from \"../ui/YearItem\";\nimport { TaskProps } from \"./Task\";\n\ntype DrawerProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  years: YearItemProps[];\n  changeTask: React.Dispatch<React.SetStateAction<TaskProps|null>>;\n};\nconst Drawer = ({ isOpen, onClose, years, changeTask }: DrawerProps) => (\n  <ChakraDrawer isOpen={isOpen} placement=\"left\" onClose={() => onClose()}>\n    <DrawerOverlay>\n      <DrawerContent>\n        <DrawerHeader>Years</DrawerHeader>\n        <DrawerBody>\n          <Accordion allowToggle>\n            {years.map((year, idx) => (\n              <YearItem key={idx} {...year} />\n            ))}\n          </Accordion>\n        </DrawerBody>\n      </DrawerContent>\n    </DrawerOverlay>\n  </ChakraDrawer>\n);\n\nexport default Drawer;\n","import { Container, Link } from \"@chakra-ui/react\";\nimport { Text } from \"@chakra-ui/react\";\nimport React from \"react\";\n\nconst Home = () => (\n  <Container centerContent padding={20} >\n    <Text fontSize=\"3xl\" as=\"cite\">\n      <Link color=\"teal.500\" href=\"https://adventofcode.com/\" isExternal>\n        Advent of Code&nbsp;\n      </Link>\n      is an Advent calendar of small programming puzzles for a variety of skill\n      sets and skill levels that can be solved in any programming language you\n      like.\n    </Text>\n    <Text marginTop={4} fontSize=\"3xl\">\n      This site aims to collect my solutions (when I find them\n      😉) for the different exercises.\n    </Text>\n  </Container>\n);\nexport default Home;\n","\n\nexport async function getInput(file: string, separator: string = '\\n'): Promise<string[]> {\n    const response = await fetch(file);\n    const text = await response.text()\n    return text.split(separator);\n}\n\nexport async function getFileAsText(uri: string): Promise<string> {\n    const response = await fetch(uri);\n    let text = await response.text()\n    return text;\n}","import {\n  Accordion,\n  AccordionButton,\n  AccordionIcon,\n  AccordionItem,\n  AccordionPanel,\n  Box,\n  Button,\n  Flex,\n  Text,\n  Heading,\n  Link,\n  HStack,\n} from \"@chakra-ui/react\";\nimport React, { useEffect, useState } from \"react\";\nimport { TaskItemProps } from \"../ui/TaskItem\";\nimport { getFileAsText } from \"../utils\";\nimport { Light as SyntaxHighlighter } from \"react-syntax-highlighter\";\nimport allyDark from \"react-syntax-highlighter/dist/esm/styles/hljs/a11y-dark\";\nimport { ArrowForwardIcon, ExternalLinkIcon } from \"@chakra-ui/icons\";\n\nexport type TaskProps = TaskItemProps & {\n  descriptionUri?: string;\n  solutionUri?: string;\n  inputUri?: string;\n  solutionFn?: Function;\n};\nconst Task = ({\n  title,\n  descriptionUri,\n  solutionUri,\n  inputUri,\n  solutionFn,\n}: TaskProps) => {\n  const [code, setCode] = useState(\"\");\n  const [input, setInput] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [solution1, setSolution1] = useState(\"0\");\n  const [solution2, setSolution2] = useState(\"0\");\n\n  useEffect(() => {\n    const loadData = async () => {\n      if (solutionUri) {\n        const codeAsText = await getFileAsText(solutionUri);\n        setCode(codeAsText);\n      }\n      if (inputUri) {\n        const inputAsText = await getFileAsText(inputUri);\n        setInput(inputAsText);\n      }\n    };\n    \n    setSolution1(\"0\");\n    setSolution2(\"0\");\n    loadData();\n  }, [inputUri, solutionUri]);\n\n  const calculateSolution = async () => {\n    if (solutionFn) {\n      setIsLoading(true);\n      const sol1 = await solutionFn(true);\n      const sol2 = await solutionFn(false);\n      setSolution1(sol1);\n      setSolution2(sol2);\n      setIsLoading(false)\n    }\n  };\n  return (\n    <Flex direction=\"column\" padding={5} textAlign=\"left\">\n      <Heading as=\"h5\" marginBottom={5}>\n        {title}\n        <Link href={descriptionUri} isExternal padding={3}>\n          <ExternalLinkIcon boxSize={5} marginBottom={5} />\n        </Link>{\" \"}\n      </Heading>\n      <HStack spacing=\"24px\" padding={5} paddingLeft={0}>\n        <Button\n          colorScheme=\"teal\"\n          variant=\"outline\"\n          isLoading={isLoading}\n          loadingText=\"Calculating\"\n          rightIcon={<ArrowForwardIcon />}\n          onClick={() => calculateSolution()}\n        >\n          try out\n        </Button>\n        <Text as=\"samp\">Part one: </Text>\n        <Text as=\"code\">{solution1}</Text>\n        <Text as=\"samp\">Part two: </Text>\n        <Text as=\"code\">{solution2}</Text>\n      </HStack>\n      <Accordion allowToggle>\n        <AccordionItem>\n          <AccordionButton>\n            <Box flex=\"1\" textAlign=\"left\">\n              Code\n            </Box>\n            <AccordionIcon />\n          </AccordionButton>\n          <AccordionPanel textAlign=\"left\" pb={4}>\n            <SyntaxHighlighter\n              language=\"typescript\"\n              wrapLongLines\n              showLineNumbers\n              style={allyDark}\n            >\n              {code}\n            </SyntaxHighlighter>\n          </AccordionPanel>\n        </AccordionItem>\n        <AccordionItem>\n          <AccordionButton>\n            <Box flex=\"1\" textAlign=\"left\">\n              Input\n            </Box>\n            <AccordionIcon />\n          </AccordionButton>\n          <AccordionPanel textAlign=\"left\" pb={4}>\n            <SyntaxHighlighter language=\"text\" showLineNumbers style={allyDark}>\n              {input}\n            </SyntaxHighlighter>\n          </AccordionPanel>\n        </AccordionItem>\n      </Accordion>\n    </Flex>\n  );\n};\n\nexport default Task;\n","import { getInput } from \"../../../utils\";\n\nconst reportRepair = async (part1: boolean) => {\n    const string_list = await getInput('./data/report_repair.txt');\n\n    const list = string_list.map(line => +line);\n    for (let i = 0; i < list.length; i++) {\n        const element1 = list[i];\n        for (let j = 0; j < list.length; j++) {\n            const element2 = list[j];\n            if (part1) {\n                if (element1 + element2 === 2020) {\n                    return element1 * element2;\n                }\n\n            } else {\n                for (let z = 0; z < list.length; z++) {\n                    const element3 = list[z];\n                    if ((element1 + element2 + element3) === 2020) {\n                        return element1 * element2 * element3\n                    }\n                }\n            }\n        }\n\n    }\n}\n\nexport default reportRepair;","import * as _ from \"lodash\";\nimport { getInput } from \"../../../utils\";\n\ninterface PwdValidInput {\n    row: string;\n    part1: boolean\n}\n\ninterface ExtractedInfos {\n    low: number;\n    high: number;\n    value: string;\n    password: string;\n}\n\nconst passwordPhilosophy = async (part1: boolean): Promise<number> => {\n    const list = await getInput('./data/password_philosophy.txt');\n    return list.filter(elem => isPwdValid({ row: elem, part1: part1 })).length\n}\n\n\nconst isPwdValid = (input: PwdValidInput): boolean => {\n    const { low, high, value, password } = extractInfosFromRow(input.row);\n    if (input.part1) {\n        const occurence = count(password, value)\n        return low <= occurence && occurence <= high;\n    } else {\n        const lowMatched = password.charAt(+low - 1).startsWith(value);\n        const highMatched = password.charAt(+high - 1).startsWith(value);\n        if (lowMatched && highMatched) return false;\n        if (lowMatched || highMatched) return true;\n        return false;\n    }\n\n}\n\nfunction extractInfosFromRow(row: string): ExtractedInfos {\n    const [range, rowValue, password] = row.split(' ');\n    const [min, max] = range.split('-');\n    const value = rowValue.replace(':', '');\n    return { low: +min, high: +max, value: value, password: password }\n}\n\nfunction count(str: string, chr: string): number {\n    return _.countBy(str)[chr] | 0;\n}\n\nexport default passwordPhilosophy;","import { getInput } from \"../../../utils\";\n\nconst TREE = \"#\";\n\n\ninterface CountInput {\n    right: number,\n    down: number\n}\n\nconst tobogganTrajectory = async (part1: boolean): Promise<number> => {\n\n    const list = await getInput('./data/toboggan_trajectory.txt');\n\n    let countInputs: Array<CountInput> = [{ right: 3, down: 1 }];\n    var countTree = 0;\n    if (!part1) {\n        countInputs = [{ right: 1, down: 1 }, { right: 3, down: 1 }, { right: 5, down: 1 }, { right: 7, down: 1 }, { right: 1, down: 2 },]\n        countTree = 1;\n    }\n\n    for (const countInput of countInputs) {\n        if (part1) {\n            countTree = countTree + count(countInput, list)\n        } else {\n            countTree = countTree * count(countInput, list)\n        }\n\n    }\n    return countTree;\n}\n\n\nconst count = (input: CountInput, list: Array<string>): number => {\n    var { right, down } = input\n\n    var max_x = list[0].length;\n    var position: string;\n    var treeCount = 0;\n    for (let y = input.down; y < list.length; y += down) {\n        position = list[y][right]\n        if (position.startsWith(TREE)) {\n            treeCount += 1;\n        }\n        right = (right + input.right) % max_x\n    }\n    return treeCount;\n}\n\nexport default tobogganTrajectory;","import { getInput } from \"../../../utils\";\n\ninterface Field {\n    regex: RegExp;\n    fieldValidator: (value: string) => boolean;\n}\n\ntype Passport = { [key: string]: string };\n\n\nconst passportProcessing = async (part1: boolean): Promise<number> => {\n    const list = cleanList(await getInput('./data/passport_processing.txt'));\n    return list.filter( passport => isValidPassport(passport, part1)).length\n}\n\n\nconst cleanList = (lines: Array<string>): Array<Passport> => {\n    const passports = [];\n    let currentPassport: Passport = {}\n    for (const line of lines) {\n        if (!line.trim() && Object.keys(currentPassport).length > 0) {\n            passports.push(currentPassport);\n            currentPassport = {};\n        } else {\n            const keyValue = line.trim().split(\" \").map(t => t.trim().split(\":\"));\n            for (const [field, value] of keyValue) {\n                currentPassport[field] = value;\n            }\n        }\n    }\n    if (Object.keys(currentPassport).length > 0) {\n        passports.push(currentPassport);\n    }\n    return passports;\n}\n\nconst isValidPassport = (passport: Passport, part1: boolean): boolean => {\n    const fields: Map<string, Field> = new Map();\n    fields.set(\"byr\", {\n        regex: new RegExp('^([0-9]{4})$'),\n        fieldValidator: (value: string) => ((parseInt(value, 10) > 1919) && (parseInt(value, 10) < 2003))\n    });\n    fields.set(\"iyr\", {\n        regex: new RegExp('^([0-9]{4})$'),\n        fieldValidator: (value: string) => ((parseInt(value, 10) > 2009) && (parseInt(value, 10) < 2021))\n    });\n    fields.set(\"eyr\", {\n        regex: new RegExp('^([0-9]{4})$'),\n        fieldValidator: (value: string) => ((parseInt(value, 10) > 2019) && (parseInt(value, 10) < 2031))\n    });\n    fields.set(\"hgt\", {\n        regex: new RegExp('^(([0-9]{3}cm)|([0-9]{2}in))$'),\n        fieldValidator: (value: string) => {\n            if (value.indexOf('cm') !== -1) {\n                value = value.replace('cm', '')\n                return (parseInt(value, 10) > 149) && (parseInt(value, 10) < 194);\n            }\n            if (value.indexOf('in') !== -1) {\n                value = value.replace('in', '')\n                return (parseInt(value, 10) > 58) && (parseInt(value, 10) < 77);\n            }\n            return false;\n\n        }\n    });\n    fields.set(\"hcl\", {\n        regex: new RegExp('^(#[0-9a-f]{6})$'),\n        fieldValidator: (value: string) => true\n    });\n    fields.set(\"ecl\", {\n        regex: new RegExp('^(amb|blu|brn|gry|grn|hzl|oth)$'),\n        fieldValidator: (value: string) => true\n    });\n\n    fields.set(\"pid\", {\n        regex: new RegExp('^([0-9]{9})$'),\n        fieldValidator: (value: string) => true\n    });\n\n    for (const [field, {regex, fieldValidator}] of fields.entries()) {\n        const value = passport[field]\n        if (!value) return false\n        if (!part1 && (!regex.test(value) || !fieldValidator(value))) return false\n\n    }\n\n    return true;\n}\n\n\n\n\nexport default passportProcessing;","import * as _ from \"lodash\";\nimport { getInput } from \"../../../utils\";\n\nconst TRANSALTION = new Map<string, string>([[\"F\",\"0\"], [\"B\",\"1\"], [\"R\", \"1\"], [\"L\", \"0\"]]);\nconst FACTOR = 8;\n\nconst binaryBoarding = async (part1: boolean): Promise<number> => {\n    const list = await getInput('./data/binary_boarding.txt');\n    \n    const seatIds = list.map(passport => convertToSeatId(passport));\n    const max = _.max(seatIds);\n    if (part1 && max) return max;\n\n    const min = _.min(seatIds);\n    if (min) {\n        const allSeatsIds = _.range(min, max);\n        const mySeatId = _.difference(allSeatsIds, seatIds)[0];\n        return mySeatId;\n    }\n    return 0\n}\n\nconst convertToSeatId = (boardingPass: string): number => {\n    let seatId = \"\"\n    for (var i = 0; i < boardingPass.length; i++) {\n        seatId += TRANSALTION.get(boardingPass.charAt(i))\n    }\n    const row = parseInt(seatId.substr(0, 7), 2);\n    const column = parseInt(seatId.substr(7, 10), 2);\n    return row*FACTOR + column;\n}\n\nexport default binaryBoarding;\n","import { getInput } from \"../../../utils\";\nimport * as _ from 'lodash';\n\nconst CustomCustoms = async (part1: boolean): Promise<string> => {\n    const list = await getInput('./data/custom_customs.txt', '\\n\\n');\n    if (part1) return _.sum(\n        list\n            .map(line => new Set(line\n                            .replaceAll(\"\\n\", \"\")\n                            .split(\"\")\n                        ).size)\n                    ).toString()\n\n    const everyoneAnsweredYes = list.map(line => {\n        let answers = 0;\n        const allAnswers = new Set(line.replaceAll(\"\\n\", \"\").split(\"\"))\n        const answersProPerson = line.split(\"\\n\").map(answers => answers.split(\"\"));\n        \n        for (const answ of allAnswers) {\n            let yesForEveryone = true;\n            for (const answPerson of answersProPerson) {\n                if (!_.includes(answPerson, answ)) {\n                    yesForEveryone = false;\n                    break;\n                }\n            }\n            if (yesForEveryone) answers +=1\n            yesForEveryone = true;\n        }\n        return answers;\n    })\n    \n\n    return _.sum(everyoneAnsweredYes).toString()\n\n\n}\n\nexport default CustomCustoms;","import * as React from \"react\";\nimport {\n  ChakraProvider,\n  Box,\n  Grid,\n  useDisclosure,\n  extendTheme,\n} from \"@chakra-ui/react\";\nimport { Header } from \"./components/Header\";\nimport Drawer from \"./components/Drawer\";\nimport { YearItemProps } from \"./ui/YearItem\";\nimport Home from \"./components/Home\";\nimport { useState } from \"react\";\nimport Task, { TaskProps } from \"./components/Task\";\nimport reportRepair from \"./solutions/2020/1_report_repair\";\nimport passwordPhilosophy from \"./solutions/2020/2_password_philosophy\";\nimport tobogganTrajectory from \"./solutions/2020/3_toboggan_trajectory\";\nimport passportProcessing from \"./solutions/2020/4_passport_processing\";\nimport binaryBoarding from \"./solutions/2020/5_binary_boarding\";\nimport customCustoms from \"./solutions/2020/6_custom_customs\";\n\nexport const App = () => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [selectedTask, setSelectedTask] = useState<TaskProps | null>(null);\n\n  const changeSelectedTask = (id: string): void => {\n    for (const year of years) {\n      for (const task of year.tasks) {\n        if (task.id.startsWith(id)) {\n          setSelectedTask(task);\n          break;\n        }\n      }\n    }\n  };\n  const years: YearItemProps[] = [\n    {\n      title: \"2020\",\n      tasks: [\n        {\n          id: \"2020_1\",\n          title: \"Day 1: Report Repair\",\n          first: true,\n          second: true,\n          descriptionUri: \"https://adventofcode.com/2020/day/1\",\n          changeTask: changeSelectedTask,\n          solutionUri:\n            \"https://raw.githubusercontent.com/JonasNicoletti/advent-of-code/main/src/solutions/2020/1_report_repair/index.ts\",\n          inputUri: \"./data/report_repair.txt\",\n          solutionFn: reportRepair,\n        },\n        {\n          id: \"2020_2\",\n          title: \"Day 2: Password Philosophy\",\n          first: true,\n          second: true,\n          descriptionUri: \"https://adventofcode.com/2020/day/2\",\n          solutionUri:\n            \"https://raw.githubusercontent.com/JonasNicoletti/advent-of-code/main/src/solutions/2020/2_password_philosophy/index.ts\",\n          inputUri: \"./data/password_philosophy.txt\",\n          changeTask: changeSelectedTask,\n          solutionFn: passwordPhilosophy,\n        },\n        {\n          id: \"2020_3\",\n          title: \"Day 3: Toboggan Trajectory\",\n          first: true,\n          second: true,\n          descriptionUri: \"https://adventofcode.com/2020/day/3\",\n          changeTask: changeSelectedTask,\n          inputUri: \"./data/toboggan_trajectory.txt\",\n          solutionUri:\n            \"https://raw.githubusercontent.com/JonasNicoletti/advent-of-code/main/src/solutions/2020/3_toboggan_trajectory/index.ts\",\n          solutionFn: tobogganTrajectory,\n        },\n        {\n          id: \"2020_4\",\n          title: \"Day 4: Passport Processing\",\n          first: true,\n          second: true,\n          descriptionUri: \"https://adventofcode.com/2020/day/4\",\n          inputUri: \"./data/passport_processing.txt\",\n          solutionUri:\n            \"https://raw.githubusercontent.com/JonasNicoletti/advent-of-code/main/src/solutions/2020/4_passport_processing/index.ts\",\n          solutionFn: passportProcessing,\n          changeTask: changeSelectedTask,\n        },\n        {\n          id: \"2020_5\",\n          title: \"Day 5: Binary Boarding\",\n          first: true,\n          second: true,\n          descriptionUri: \"https://adventofcode.com/2020/day/5\",\n          inputUri: \"./data/binary_boarding.txt\",\n          solutionUri:\n            \"https://raw.githubusercontent.com/JonasNicoletti/advent-of-code/main/src/solutions/2020/5_binary_boarding/index.ts\",\n          solutionFn: binaryBoarding,\n          changeTask: changeSelectedTask,\n        },\n        {\n          id: \"2020_6\",\n          title: \"Day 6: Custom Customs\",\n          first: true,\n          second: false,\n          descriptionUri: \"https://adventofcode.com/2020/day/6\",\n          inputUri: \"./data/custom_customs.txt\",\n          solutionUri:\n            \"https://raw.githubusercontent.com/JonasNicoletti/advent-of-code/main/src/solutions/2020/6_custom_customs/index.ts\",\n          solutionFn: customCustoms,\n          changeTask: changeSelectedTask,\n        },\n      ],\n    },\n  ];\n\n  const config = {\n    useSystemColorMode: false,\n    initialColorMode: \"dark\",\n  }\n\n  const customTheme = extendTheme({ config })\n  return (\n    <ChakraProvider theme={customTheme}>\n      <Box textAlign=\"center\" fontSize=\"xl\">\n        <Header\n          openDrawer={onOpen}\n          closeDrawer={onClose}\n          isDrawerOpen={isOpen}\n          goHome={() => setSelectedTask(null)}\n        />\n        <Drawer\n          isOpen={isOpen}\n          onClose={onClose}\n          years={years}\n          changeTask={setSelectedTask}\n        />\n        <Grid minH=\"100vh\" p={3}>\n          {selectedTask ? <Task {...selectedTask} /> : <Home />}\n        </Grid>\n      </Box>\n    </ChakraProvider>\n  );\n};\n","import { ReportHandler } from \"web-vitals\"\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\",\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\",\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      )\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import { ColorModeScript } from \"@chakra-ui/react\"\nimport * as React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { App } from \"./App\"\nimport reportWebVitals from \"./reportWebVitals\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <ColorModeScript />\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister()\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}